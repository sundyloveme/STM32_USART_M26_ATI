; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_dma.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\USER -I..\MDK-ARM -IC:\Users\Administrator\Desktop\stm32-uart-chenlong\stm32-uart-chenlong\MDK-ARM\RTE -I"D:\Program Files\keil5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include" -I"D:\Program Files\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0" -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_MD --omf_browse=.\obj\stm32f10x_dma.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;520      */
;;;521    void DMA_ClearFlag(uint32_t DMA_FLAG)
000000  f0005180          AND      r1,r0,#0x10000000
;;;522    {
;;;523      /* Check the parameters */
;;;524      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;525      /* Calculate the used DMA */
;;;526    
;;;527      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
000004  b111              CBZ      r1,|L1.12|
;;;528      {
;;;529        /* Clear the selected DMA flags */
;;;530        DMA2->IFCR = DMA_FLAG;
000006  4903              LDR      r1,|L1.20|
000008  6008              STR      r0,[r1,#0]
00000a  e001              B        |L1.16|
                  |L1.12|
;;;531      }
;;;532      else
;;;533      {
;;;534        /* Clear the selected DMA flags */
;;;535        DMA1->IFCR = DMA_FLAG;
00000c  4902              LDR      r1,|L1.24|
00000e  6048              STR      r0,[r1,#4]
                  |L1.16|
;;;536      }
;;;537    }
000010  4770              BX       lr
;;;538    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40020404
                  |L1.24|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;680      */
;;;681    void DMA_ClearITPendingBit(uint32_t DMA_IT)
000000  f0005180          AND      r1,r0,#0x10000000
;;;682    {
;;;683      /* Check the parameters */
;;;684      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;685    
;;;686      /* Calculate the used DMA */
;;;687      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
000004  b111              CBZ      r1,|L2.12|
;;;688      {
;;;689        /* Clear the selected DMA interrupt pending bits */
;;;690        DMA2->IFCR = DMA_IT;
000006  4903              LDR      r1,|L2.20|
000008  6008              STR      r0,[r1,#0]
00000a  e001              B        |L2.16|
                  |L2.12|
;;;691      }
;;;692      else
;;;693      {
;;;694        /* Clear the selected DMA interrupt pending bits */
;;;695        DMA1->IFCR = DMA_IT;
00000c  4902              LDR      r1,|L2.24|
00000e  6048              STR      r0,[r1,#4]
                  |L2.16|
;;;696      }
;;;697    }
000010  4770              BX       lr
;;;698    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40020404
                  |L2.24|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;292      */
;;;293    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  b121              CBZ      r1,|L3.12|
;;;294    {
;;;295      /* Check the parameters */
;;;296      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;297      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;298    
;;;299      if (NewState != DISABLE)
;;;300      {
;;;301        /* Enable the selected DMAy Channelx */
;;;302        DMAy_Channelx->CCR |= DMA_CCR1_EN;
000002  6802              LDR      r2,[r0,#0]
000004  f0420201          ORR      r2,r2,#1
000008  6002              STR      r2,[r0,#0]
00000a  e004              B        |L3.22|
                  |L3.12|
;;;303      }
;;;304      else
;;;305      {
;;;306        /* Disable the selected DMAy Channelx */
;;;307        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00000c  6802              LDR      r2,[r0,#0]
00000e  f64f73fe          MOV      r3,#0xfffe
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L3.22|
;;;308      }
;;;309    }
000016  4770              BX       lr
;;;310    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;106      */
;;;107    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;108    {
;;;109      /* Check the parameters */
;;;110      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;111      
;;;112      /* Disable the selected DMAy Channelx */
;;;113      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;114      
;;;115      /* Reset DMAy Channelx control register */
;;;116      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;117      
;;;118      /* Reset DMAy Channelx remaining bytes register */
;;;119      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;120      
;;;121      /* Reset DMAy Channelx peripheral address register */
;;;122      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;123      
;;;124      /* Reset DMAy Channelx memory address register */
;;;125      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;126      
;;;127      if (DMAy_Channelx == DMA1_Channel1)
000014  494b              LDR      r1,|L4.324|
000016  4288              CMP      r0,r1
000018  d108              BNE      |L4.44|
;;;128      {
;;;129        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;130        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
00001a  494a              LDR      r1,|L4.324|
00001c  3908              SUBS     r1,r1,#8
00001e  6849              LDR      r1,[r1,#4]
000020  f041010f          ORR      r1,r1,#0xf
000024  4a47              LDR      r2,|L4.324|
000026  3a08              SUBS     r2,r2,#8
000028  6051              STR      r1,[r2,#4]
00002a  e08a              B        |L4.322|
                  |L4.44|
;;;131      }
;;;132      else if (DMAy_Channelx == DMA1_Channel2)
00002c  4945              LDR      r1,|L4.324|
00002e  3114              ADDS     r1,r1,#0x14
000030  4288              CMP      r0,r1
000032  d108              BNE      |L4.70|
;;;133      {
;;;134        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;135        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
000034  4943              LDR      r1,|L4.324|
000036  3908              SUBS     r1,r1,#8
000038  6849              LDR      r1,[r1,#4]
00003a  f04101f0          ORR      r1,r1,#0xf0
00003e  4a41              LDR      r2,|L4.324|
000040  3a08              SUBS     r2,r2,#8
000042  6051              STR      r1,[r2,#4]
000044  e07d              B        |L4.322|
                  |L4.70|
;;;136      }
;;;137      else if (DMAy_Channelx == DMA1_Channel3)
000046  493f              LDR      r1,|L4.324|
000048  3128              ADDS     r1,r1,#0x28
00004a  4288              CMP      r0,r1
00004c  d108              BNE      |L4.96|
;;;138      {
;;;139        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;140        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
00004e  493d              LDR      r1,|L4.324|
000050  3908              SUBS     r1,r1,#8
000052  6849              LDR      r1,[r1,#4]
000054  f4416170          ORR      r1,r1,#0xf00
000058  4a3a              LDR      r2,|L4.324|
00005a  3a08              SUBS     r2,r2,#8
00005c  6051              STR      r1,[r2,#4]
00005e  e070              B        |L4.322|
                  |L4.96|
;;;141      }
;;;142      else if (DMAy_Channelx == DMA1_Channel4)
000060  4938              LDR      r1,|L4.324|
000062  313c              ADDS     r1,r1,#0x3c
000064  4288              CMP      r0,r1
000066  d108              BNE      |L4.122|
;;;143      {
;;;144        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;145        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
000068  4936              LDR      r1,|L4.324|
00006a  3908              SUBS     r1,r1,#8
00006c  6849              LDR      r1,[r1,#4]
00006e  f4414170          ORR      r1,r1,#0xf000
000072  4a34              LDR      r2,|L4.324|
000074  3a08              SUBS     r2,r2,#8
000076  6051              STR      r1,[r2,#4]
000078  e063              B        |L4.322|
                  |L4.122|
;;;146      }
;;;147      else if (DMAy_Channelx == DMA1_Channel5)
00007a  4932              LDR      r1,|L4.324|
00007c  3150              ADDS     r1,r1,#0x50
00007e  4288              CMP      r0,r1
000080  d108              BNE      |L4.148|
;;;148      {
;;;149        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;150        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
000082  4930              LDR      r1,|L4.324|
000084  3908              SUBS     r1,r1,#8
000086  6849              LDR      r1,[r1,#4]
000088  f4412170          ORR      r1,r1,#0xf0000
00008c  4a2d              LDR      r2,|L4.324|
00008e  3a08              SUBS     r2,r2,#8
000090  6051              STR      r1,[r2,#4]
000092  e056              B        |L4.322|
                  |L4.148|
;;;151      }
;;;152      else if (DMAy_Channelx == DMA1_Channel6)
000094  492b              LDR      r1,|L4.324|
000096  3164              ADDS     r1,r1,#0x64
000098  4288              CMP      r0,r1
00009a  d108              BNE      |L4.174|
;;;153      {
;;;154        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;155        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
00009c  4929              LDR      r1,|L4.324|
00009e  3908              SUBS     r1,r1,#8
0000a0  6849              LDR      r1,[r1,#4]
0000a2  f4410170          ORR      r1,r1,#0xf00000
0000a6  4a27              LDR      r2,|L4.324|
0000a8  3a08              SUBS     r2,r2,#8
0000aa  6051              STR      r1,[r2,#4]
0000ac  e049              B        |L4.322|
                  |L4.174|
;;;156      }
;;;157      else if (DMAy_Channelx == DMA1_Channel7)
0000ae  4925              LDR      r1,|L4.324|
0000b0  3178              ADDS     r1,r1,#0x78
0000b2  4288              CMP      r0,r1
0000b4  d108              BNE      |L4.200|
;;;158      {
;;;159        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;160        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
0000b6  4923              LDR      r1,|L4.324|
0000b8  3908              SUBS     r1,r1,#8
0000ba  6849              LDR      r1,[r1,#4]
0000bc  f0416170          ORR      r1,r1,#0xf000000
0000c0  4a20              LDR      r2,|L4.324|
0000c2  3a08              SUBS     r2,r2,#8
0000c4  6051              STR      r1,[r2,#4]
0000c6  e03c              B        |L4.322|
                  |L4.200|
;;;161      }
;;;162      else if (DMAy_Channelx == DMA2_Channel1)
0000c8  491f              LDR      r1,|L4.328|
0000ca  4288              CMP      r0,r1
0000cc  d106              BNE      |L4.220|
;;;163      {
;;;164        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;165        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
0000ce  1f01              SUBS     r1,r0,#4
0000d0  6809              LDR      r1,[r1,#0]
0000d2  f041010f          ORR      r1,r1,#0xf
0000d6  1f02              SUBS     r2,r0,#4
0000d8  6011              STR      r1,[r2,#0]
0000da  e032              B        |L4.322|
                  |L4.220|
;;;166      }
;;;167      else if (DMAy_Channelx == DMA2_Channel2)
0000dc  491a              LDR      r1,|L4.328|
0000de  3114              ADDS     r1,r1,#0x14
0000e0  4288              CMP      r0,r1
0000e2  d108              BNE      |L4.246|
;;;168      {
;;;169        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;170        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
0000e4  4918              LDR      r1,|L4.328|
0000e6  1f09              SUBS     r1,r1,#4
0000e8  6809              LDR      r1,[r1,#0]
0000ea  f04101f0          ORR      r1,r1,#0xf0
0000ee  4a16              LDR      r2,|L4.328|
0000f0  1f12              SUBS     r2,r2,#4
0000f2  6011              STR      r1,[r2,#0]
0000f4  e025              B        |L4.322|
                  |L4.246|
;;;171      }
;;;172      else if (DMAy_Channelx == DMA2_Channel3)
0000f6  4914              LDR      r1,|L4.328|
0000f8  3128              ADDS     r1,r1,#0x28
0000fa  4288              CMP      r0,r1
0000fc  d108              BNE      |L4.272|
;;;173      {
;;;174        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;175        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
0000fe  4912              LDR      r1,|L4.328|
000100  1f09              SUBS     r1,r1,#4
000102  6809              LDR      r1,[r1,#0]
000104  f4416170          ORR      r1,r1,#0xf00
000108  4a0f              LDR      r2,|L4.328|
00010a  1f12              SUBS     r2,r2,#4
00010c  6011              STR      r1,[r2,#0]
00010e  e018              B        |L4.322|
                  |L4.272|
;;;176      }
;;;177      else if (DMAy_Channelx == DMA2_Channel4)
000110  490d              LDR      r1,|L4.328|
000112  313c              ADDS     r1,r1,#0x3c
000114  4288              CMP      r0,r1
000116  d108              BNE      |L4.298|
;;;178      {
;;;179        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;180        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
000118  490b              LDR      r1,|L4.328|
00011a  1f09              SUBS     r1,r1,#4
00011c  6809              LDR      r1,[r1,#0]
00011e  f4414170          ORR      r1,r1,#0xf000
000122  4a09              LDR      r2,|L4.328|
000124  1f12              SUBS     r2,r2,#4
000126  6011              STR      r1,[r2,#0]
000128  e00b              B        |L4.322|
                  |L4.298|
;;;181      }
;;;182      else
;;;183      { 
;;;184        if (DMAy_Channelx == DMA2_Channel5)
00012a  4907              LDR      r1,|L4.328|
00012c  3150              ADDS     r1,r1,#0x50
00012e  4288              CMP      r0,r1
000130  d107              BNE      |L4.322|
;;;185        {
;;;186          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;187          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
000132  4905              LDR      r1,|L4.328|
000134  1f09              SUBS     r1,r1,#4
000136  6809              LDR      r1,[r1,#0]
000138  f4412170          ORR      r1,r1,#0xf0000
00013c  4a02              LDR      r2,|L4.328|
00013e  1f12              SUBS     r2,r2,#4
000140  6011              STR      r1,[r2,#0]
                  |L4.322|
;;;188        }
;;;189      }
;;;190    }
000142  4770              BX       lr
;;;191    
                          ENDP

                  |L4.324|
                          DCD      0x40020008
                  |L4.328|
                          DCD      0x40020408

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;369      */
;;;370    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  4601              MOV      r1,r0
;;;371    {
;;;372      /* Check the parameters */
;;;373      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;374      /* Return the number of remaining data units for DMAy Channelx */
;;;375      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  6848              LDR      r0,[r1,#4]
000004  b280              UXTH     r0,r0
;;;376    }
000006  4770              BX       lr
;;;377    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;431      */
;;;432    FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
000000  4601              MOV      r1,r0
;;;433    {
;;;434      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;435      uint32_t tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;436      /* Check the parameters */
;;;437      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;438    
;;;439      /* Calculate the used DMA */
;;;440      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
000006  f0015380          AND      r3,r1,#0x10000000
00000a  b113              CBZ      r3,|L6.18|
;;;441      {
;;;442        /* Get DMA2 ISR register value */
;;;443        tmpreg = DMA2->ISR ;
00000c  4b05              LDR      r3,|L6.36|
00000e  681a              LDR      r2,[r3,#0]
000010  e001              B        |L6.22|
                  |L6.18|
;;;444      }
;;;445      else
;;;446      {
;;;447        /* Get DMA1 ISR register value */
;;;448        tmpreg = DMA1->ISR ;
000012  4b05              LDR      r3,|L6.40|
000014  681a              LDR      r2,[r3,#0]
                  |L6.22|
;;;449      }
;;;450    
;;;451      /* Check the status of the specified DMA flag */
;;;452      if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
000016  ea020301          AND      r3,r2,r1
00001a  b10b              CBZ      r3,|L6.32|
;;;453      {
;;;454        /* DMA_FLAG is set */
;;;455        bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L6.34|
                  |L6.32|
;;;456      }
;;;457      else
;;;458      {
;;;459        /* DMA_FLAG is reset */
;;;460        bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L6.34|
;;;461      }
;;;462      
;;;463      /* Return the DMA_FLAG status */
;;;464      return  bitstatus;
;;;465    }
000022  4770              BX       lr
;;;466    
                          ENDP

                  |L6.36|
                          DCD      0x40020400
                  |L6.40|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;592      */
;;;593    ITStatus DMA_GetITStatus(uint32_t DMA_IT)
000000  4601              MOV      r1,r0
;;;594    {
;;;595      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;596      uint32_t tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;597      /* Check the parameters */
;;;598      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;599    
;;;600      /* Calculate the used DMA */
;;;601      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
000006  f0015380          AND      r3,r1,#0x10000000
00000a  b113              CBZ      r3,|L7.18|
;;;602      {
;;;603        /* Get DMA2 ISR register value */
;;;604        tmpreg = DMA2->ISR ;
00000c  4b05              LDR      r3,|L7.36|
00000e  681a              LDR      r2,[r3,#0]
000010  e001              B        |L7.22|
                  |L7.18|
;;;605      }
;;;606      else
;;;607      {
;;;608        /* Get DMA1 ISR register value */
;;;609        tmpreg = DMA1->ISR ;
000012  4b05              LDR      r3,|L7.40|
000014  681a              LDR      r2,[r3,#0]
                  |L7.22|
;;;610      }
;;;611    
;;;612      /* Check the status of the specified DMA interrupt */
;;;613      if ((tmpreg & DMA_IT) != (uint32_t)RESET)
000016  ea020301          AND      r3,r2,r1
00001a  b10b              CBZ      r3,|L7.32|
;;;614      {
;;;615        /* DMA_IT is set */
;;;616        bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L7.34|
                  |L7.32|
;;;617      }
;;;618      else
;;;619      {
;;;620        /* DMA_IT is reset */
;;;621        bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L7.34|
;;;622      }
;;;623      /* Return the DMA_IT status */
;;;624      return  bitstatus;
;;;625    }
000022  4770              BX       lr
;;;626    
                          ENDP

                  |L7.36|
                          DCD      0x40020400
                  |L7.40|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;324      */
;;;325    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  b11a              CBZ      r2,|L8.10|
;;;326    {
;;;327      /* Check the parameters */
;;;328      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;329      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;330      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;331      if (NewState != DISABLE)
;;;332      {
;;;333        /* Enable the selected DMA interrupts */
;;;334        DMAy_Channelx->CCR |= DMA_IT;
000002  6803              LDR      r3,[r0,#0]
000004  430b              ORRS     r3,r3,r1
000006  6003              STR      r3,[r0,#0]
000008  e002              B        |L8.16|
                  |L8.10|
;;;335      }
;;;336      else
;;;337      {
;;;338        /* Disable the selected DMA interrupts */
;;;339        DMAy_Channelx->CCR &= ~DMA_IT;
00000a  6803              LDR      r3,[r0,#0]
00000c  438b              BICS     r3,r3,r1
00000e  6003              STR      r3,[r0,#0]
                  |L8.16|
;;;340      }
;;;341    }
000010  4770              BX       lr
;;;342    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;200      */
;;;201    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203      uint32_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;204    
;;;205      /* Check the parameters */
;;;206      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;207      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;208      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;209      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;210      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;211      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;212      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;213      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;214      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;215      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;216    
;;;217    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;218      /* Get the DMAy_Channelx CCR value */
;;;219      tmpreg = DMAy_Channelx->CCR;
000004  6802              LDR      r2,[r0,#0]
;;;220      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;221      tmpreg &= CCR_CLEAR_Mask;
000006  f64773f0          MOV      r3,#0x7ff0
00000a  439a              BICS     r2,r2,r3
;;;222      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;223      /* Set DIR bit according to DMA_DIR value */
;;;224      /* Set CIRC bit according to DMA_Mode value */
;;;225      /* Set PINC bit according to DMA_PeripheralInc value */
;;;226      /* Set MINC bit according to DMA_MemoryInc value */
;;;227      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;228      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;229      /* Set PL bits according to DMA_Priority value */
;;;230      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;231      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000c  6a0c              LDR      r4,[r1,#0x20]
00000e  688b              LDR      r3,[r1,#8]
000010  4323              ORRS     r3,r3,r4
000012  690c              LDR      r4,[r1,#0x10]
000014  4323              ORRS     r3,r3,r4
000016  694c              LDR      r4,[r1,#0x14]
000018  4323              ORRS     r3,r3,r4
00001a  698c              LDR      r4,[r1,#0x18]
00001c  4323              ORRS     r3,r3,r4
00001e  69cc              LDR      r4,[r1,#0x1c]
000020  4323              ORRS     r3,r3,r4
000022  6a4c              LDR      r4,[r1,#0x24]
000024  4323              ORRS     r3,r3,r4
000026  6a8c              LDR      r4,[r1,#0x28]
000028  4323              ORRS     r3,r3,r4
00002a  431a              ORRS     r2,r2,r3
;;;232                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;233                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;234                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;235    
;;;236      /* Write to DMAy Channelx CCR */
;;;237      DMAy_Channelx->CCR = tmpreg;
00002c  6002              STR      r2,[r0,#0]
;;;238    
;;;239    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;240      /* Write to DMAy Channelx CNDTR */
;;;241      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002e  68cb              LDR      r3,[r1,#0xc]
000030  6043              STR      r3,[r0,#4]
;;;242    
;;;243    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;244      /* Write to DMAy Channelx CPAR */
;;;245      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000032  680b              LDR      r3,[r1,#0]
000034  6083              STR      r3,[r0,#8]
;;;246    
;;;247    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;248      /* Write to DMAy Channelx CMAR */
;;;249      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000036  684b              LDR      r3,[r1,#4]
000038  60c3              STR      r3,[r0,#0xc]
;;;250    }
00003a  bd10              POP      {r4,pc}
;;;251    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;351      */
;;;352    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  6041              STR      r1,[r0,#4]
;;;353    {
;;;354      /* Check the parameters */
;;;355      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;356      
;;;357    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;358      /* Write to DMAy Channelx CNDTR */
;;;359      DMAy_Channelx->CNDTR = DataNumber;  
;;;360    }
000002  4770              BX       lr
;;;361    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;257      */
;;;258    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;259    {
;;;260    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;261      /* Initialize the DMA_PeripheralBaseAddr member */
;;;262      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;263      /* Initialize the DMA_MemoryBaseAddr member */
;;;264      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;265      /* Initialize the DMA_DIR member */
;;;266      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000006  6081              STR      r1,[r0,#8]
;;;267      /* Initialize the DMA_BufferSize member */
;;;268      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;269      /* Initialize the DMA_PeripheralInc member */
;;;270      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;271      /* Initialize the DMA_MemoryInc member */
;;;272      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;273      /* Initialize the DMA_PeripheralDataSize member */
;;;274      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;275      /* Initialize the DMA_MemoryDataSize member */
;;;276      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;277      /* Initialize the DMA_Mode member */
;;;278      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;279      /* Initialize the DMA_Priority member */
;;;280      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;281      /* Initialize the DMA_M2M member */
;;;282      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;283    }
000018  4770              BX       lr
;;;284    
                          ENDP

