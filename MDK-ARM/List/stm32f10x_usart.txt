; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_usart.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\USER -I..\MDK-ARM -IC:\Users\Administrator\Desktop\stm32-uart-chenlong\stm32-uart-chenlong\MDK-ARM\RTE -I"D:\Program Files\keil5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include" -I"D:\Program Files\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0" -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_MD --omf_browse=.\obj\stm32f10x_usart.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_usart.c]
                          THUMB

                          AREA ||i.USART_ClearFlag||, CODE, READONLY, ALIGN=1

                  USART_ClearFlag PROC
;;;919      */
;;;920    void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  f4017200          AND      r2,r1,#0x200
;;;921    {
;;;922      /* Check the parameters */
;;;923      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;924      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;925      /* The CTS flag is not available for UART4 and UART5 */
;;;926      if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
000004  f5b27f00          CMP      r2,#0x200
000008  d100              BNE      |L1.12|
;;;927      {
;;;928        assert_param(IS_USART_123_PERIPH(USARTx));
00000a  bf00              NOP      
                  |L1.12|
;;;929      } 
;;;930       
;;;931      USARTx->SR = (uint16_t)~USART_FLAG;
00000c  43ca              MVNS     r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;932    }
000010  4770              BX       lr
;;;933    
                          ENDP


                          AREA ||i.USART_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  USART_ClearITPendingBit PROC
;;;1026     */
;;;1027   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b510              PUSH     {r4,lr}
;;;1028   {
;;;1029     uint16_t bitpos = 0x00, itmask = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
;;;1030     /* Check the parameters */
;;;1031     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1032     assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;1033     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1034     if (USART_IT == USART_IT_CTS)
000006  f640146a          MOV      r4,#0x96a
00000a  42a1              CMP      r1,r4
00000c  d100              BNE      |L2.16|
;;;1035     {
;;;1036       assert_param(IS_USART_123_PERIPH(USARTx));
00000e  bf00              NOP      
                  |L2.16|
;;;1037     }   
;;;1038     
;;;1039     bitpos = USART_IT >> 0x08;
000010  120a              ASRS     r2,r1,#8
;;;1040     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000012  2401              MOVS     r4,#1
000014  4094              LSLS     r4,r4,r2
000016  b2a3              UXTH     r3,r4
;;;1041     USARTx->SR = (uint16_t)~itmask;
000018  43dc              MVNS     r4,r3
00001a  8004              STRH     r4,[r0,#0]
;;;1042   }
00001c  bd10              POP      {r4,pc}
;;;1043   /**
                          ENDP


                          AREA ||i.USART_ClockInit||, CODE, READONLY, ALIGN=1

                  USART_ClockInit PROC
;;;298      */
;;;299    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  b510              PUSH     {r4,lr}
;;;300    {
000002  4602              MOV      r2,r0
;;;301      uint32_t tmpreg = 0x00;
000004  2000              MOVS     r0,#0
;;;302      /* Check the parameters */
;;;303      assert_param(IS_USART_123_PERIPH(USARTx));
;;;304      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;305      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;306      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;307      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;308      
;;;309    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;310      tmpreg = USARTx->CR2;
000006  8a10              LDRH     r0,[r2,#0x10]
;;;311      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;312      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000008  f24f03ff          MOV      r3,#0xf0ff
00000c  4018              ANDS     r0,r0,r3
;;;313      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;314      /* Set CLKEN bit according to USART_Clock value */
;;;315      /* Set CPOL bit according to USART_CPOL value */
;;;316      /* Set CPHA bit according to USART_CPHA value */
;;;317      /* Set LBCL bit according to USART_LastBit value */
;;;318      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
00000e  880b              LDRH     r3,[r1,#0]
000010  884c              LDRH     r4,[r1,#2]
000012  4323              ORRS     r3,r3,r4
000014  888c              LDRH     r4,[r1,#4]
000016  4323              ORRS     r3,r3,r4
000018  88cc              LDRH     r4,[r1,#6]
00001a  4323              ORRS     r3,r3,r4
00001c  4318              ORRS     r0,r0,r3
;;;319                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;320      /* Write to USART CR2 */
;;;321      USARTx->CR2 = (uint16_t)tmpreg;
00001e  8210              STRH     r0,[r2,#0x10]
;;;322    }
000020  bd10              POP      {r4,pc}
;;;323    
                          ENDP


                          AREA ||i.USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  USART_ClockStructInit PROC
;;;329      */
;;;330    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;331    {
;;;332      /* USART_ClockInitStruct members default value */
;;;333      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;334      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000004  8041              STRH     r1,[r0,#2]
;;;335      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000006  8081              STRH     r1,[r0,#4]
;;;336      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;337    }
00000a  4770              BX       lr
;;;338    
                          ENDP


                          AREA ||i.USART_Cmd||, CODE, READONLY, ALIGN=1

                  USART_Cmd PROC
;;;347      */
;;;348    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;349    {
;;;350      /* Check the parameters */
;;;351      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;352      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;353      
;;;354      if (NewState != DISABLE)
;;;355      {
;;;356        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;357        USARTx->CR1 |= CR1_UE_Set;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8182              STRH     r2,[r0,#0xc]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;358      }
;;;359      else
;;;360      {
;;;361        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;362        USARTx->CR1 &= CR1_UE_Reset;
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8182              STRH     r2,[r0,#0xc]
                  |L5.22|
;;;363      }
;;;364    }
000016  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i.USART_DMACmd||, CODE, READONLY, ALIGN=1

                  USART_DMACmd PROC
;;;444      */
;;;445    void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L6.10|
;;;446    {
;;;447      /* Check the parameters */
;;;448      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;449      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;450      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;451      if (NewState != DISABLE)
;;;452      {
;;;453        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;454           DMAR bits in the USART CR3 register */
;;;455        USARTx->CR3 |= USART_DMAReq;
000002  8a83              LDRH     r3,[r0,#0x14]
000004  430b              ORRS     r3,r3,r1
000006  8283              STRH     r3,[r0,#0x14]
000008  e002              B        |L6.16|
                  |L6.10|
;;;456      }
;;;457      else
;;;458      {
;;;459        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;460           DMAR bits in the USART CR3 register */
;;;461        USARTx->CR3 &= (uint16_t)~USART_DMAReq;
00000a  8a83              LDRH     r3,[r0,#0x14]
00000c  438b              BICS     r3,r3,r1
00000e  8283              STRH     r3,[r0,#0x14]
                  |L6.16|
;;;462      }
;;;463    }
000010  4770              BX       lr
;;;464    
                          ENDP


                          AREA ||i.USART_DeInit||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;127      */
;;;128    void USART_DeInit(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;129    {
000002  4604              MOV      r4,r0
;;;130      /* Check the parameters */
;;;131      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;132    
;;;133      if (USARTx == USART1)
000004  4820              LDR      r0,|L7.136|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L7.30|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0388              LSLS     r0,r1,#14
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f4080          MOV      r0,#0x4000
000018  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001c  e032              B        |L7.132|
                  |L7.30|
;;;137      }
;;;138      else if (USARTx == USART2)
00001e  481b              LDR      r0,|L7.140|
000020  4284              CMP      r4,r0
000022  d109              BNE      |L7.56|
;;;139      {
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
000024  2101              MOVS     r1,#1
000026  0448              LSLS     r0,r1,#17
000028  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;141        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
00002c  2100              MOVS     r1,#0
00002e  f44f3000          MOV      r0,#0x20000
000032  f7fffffe          BL       RCC_APB1PeriphResetCmd
000036  e025              B        |L7.132|
                  |L7.56|
;;;142      }
;;;143      else if (USARTx == USART3)
000038  4815              LDR      r0,|L7.144|
00003a  4284              CMP      r4,r0
00003c  d109              BNE      |L7.82|
;;;144      {
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
00003e  2101              MOVS     r1,#1
000040  0488              LSLS     r0,r1,#18
000042  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;146        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000046  2100              MOVS     r1,#0
000048  f44f2080          MOV      r0,#0x40000
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000050  e018              B        |L7.132|
                  |L7.82|
;;;147      }    
;;;148      else if (USARTx == UART4)
000052  4810              LDR      r0,|L7.148|
000054  4284              CMP      r4,r0
000056  d109              BNE      |L7.108|
;;;149      {
;;;150        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000058  2101              MOVS     r1,#1
00005a  04c8              LSLS     r0,r1,#19
00005c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;151        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000060  2100              MOVS     r1,#0
000062  f44f2000          MOV      r0,#0x80000
000066  f7fffffe          BL       RCC_APB1PeriphResetCmd
00006a  e00b              B        |L7.132|
                  |L7.108|
;;;152      }    
;;;153      else
;;;154      {
;;;155        if (USARTx == UART5)
00006c  480a              LDR      r0,|L7.152|
00006e  4284              CMP      r4,r0
000070  d108              BNE      |L7.132|
;;;156        { 
;;;157          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000072  2101              MOVS     r1,#1
000074  0508              LSLS     r0,r1,#20
000076  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;158          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
00007a  2100              MOVS     r1,#0
00007c  f44f1080          MOV      r0,#0x100000
000080  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L7.132|
;;;159        }
;;;160      }
;;;161    }
000084  bd10              POP      {r4,pc}
;;;162    
                          ENDP

000086  0000              DCW      0x0000
                  |L7.136|
                          DCD      0x40013800
                  |L7.140|
                          DCD      0x40004400
                  |L7.144|
                          DCD      0x40004800
                  |L7.148|
                          DCD      0x40004c00
                  |L7.152|
                          DCD      0x40005000

                          AREA ||i.USART_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  USART_GetFlagStatus PROC
;;;870      */
;;;871    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  4602              MOV      r2,r0
;;;872    {
;;;873      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;874      /* Check the parameters */
;;;875      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;876      assert_param(IS_USART_FLAG(USART_FLAG));
;;;877      /* The CTS flag is not available for UART4 and UART5 */
;;;878      if (USART_FLAG == USART_FLAG_CTS)
000004  f5b17f00          CMP      r1,#0x200
000008  d100              BNE      |L8.12|
;;;879      {
;;;880        assert_param(IS_USART_123_PERIPH(USARTx));
00000a  bf00              NOP      
                  |L8.12|
;;;881      }  
;;;882      
;;;883      if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
00000c  8813              LDRH     r3,[r2,#0]
00000e  400b              ANDS     r3,r3,r1
000010  b10b              CBZ      r3,|L8.22|
;;;884      {
;;;885        bitstatus = SET;
000012  2001              MOVS     r0,#1
000014  e000              B        |L8.24|
                  |L8.22|
;;;886      }
;;;887      else
;;;888      {
;;;889        bitstatus = RESET;
000016  2000              MOVS     r0,#0
                  |L8.24|
;;;890      }
;;;891      return bitstatus;
;;;892    }
000018  4770              BX       lr
;;;893    
                          ENDP


                          AREA ||i.USART_GetITStatus||, CODE, READONLY, ALIGN=1

                  USART_GetITStatus PROC
;;;952      */
;;;953    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;954    {
000002  4602              MOV      r2,r0
;;;955      uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
000004  2400              MOVS     r4,#0
000006  2300              MOVS     r3,#0
000008  2500              MOVS     r5,#0
;;;956      ITStatus bitstatus = RESET;
00000a  2000              MOVS     r0,#0
;;;957      /* Check the parameters */
;;;958      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;959      assert_param(IS_USART_GET_IT(USART_IT));
;;;960      /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;961      if (USART_IT == USART_IT_CTS)
00000c  f640166a          MOV      r6,#0x96a
000010  42b1              CMP      r1,r6
000012  d100              BNE      |L9.22|
;;;962      {
;;;963        assert_param(IS_USART_123_PERIPH(USARTx));
000014  bf00              NOP      
                  |L9.22|
;;;964      }   
;;;965      
;;;966      /* Get the USART register index */
;;;967      usartreg = (((uint8_t)USART_IT) >> 0x05);
000016  f3c11542          UBFX     r5,r1,#5,#3
;;;968      /* Get the interrupt position */
;;;969      itmask = USART_IT & IT_Mask;
00001a  f001031f          AND      r3,r1,#0x1f
;;;970      itmask = (uint32_t)0x01 << itmask;
00001e  2601              MOVS     r6,#1
000020  fa06f303          LSL      r3,r6,r3
;;;971      
;;;972      if (usartreg == 0x01) /* The IT  is in CR1 register */
000024  2d01              CMP      r5,#1
000026  d102              BNE      |L9.46|
;;;973      {
;;;974        itmask &= USARTx->CR1;
000028  8996              LDRH     r6,[r2,#0xc]
00002a  4033              ANDS     r3,r3,r6
00002c  e006              B        |L9.60|
                  |L9.46|
;;;975      }
;;;976      else if (usartreg == 0x02) /* The IT  is in CR2 register */
00002e  2d02              CMP      r5,#2
000030  d102              BNE      |L9.56|
;;;977      {
;;;978        itmask &= USARTx->CR2;
000032  8a16              LDRH     r6,[r2,#0x10]
000034  4033              ANDS     r3,r3,r6
000036  e001              B        |L9.60|
                  |L9.56|
;;;979      }
;;;980      else /* The IT  is in CR3 register */
;;;981      {
;;;982        itmask &= USARTx->CR3;
000038  8a96              LDRH     r6,[r2,#0x14]
00003a  4033              ANDS     r3,r3,r6
                  |L9.60|
;;;983      }
;;;984      
;;;985      bitpos = USART_IT >> 0x08;
00003c  120c              ASRS     r4,r1,#8
;;;986      bitpos = (uint32_t)0x01 << bitpos;
00003e  2601              MOVS     r6,#1
000040  fa06f404          LSL      r4,r6,r4
;;;987      bitpos &= USARTx->SR;
000044  8816              LDRH     r6,[r2,#0]
000046  4034              ANDS     r4,r4,r6
;;;988      if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
000048  b113              CBZ      r3,|L9.80|
00004a  b10c              CBZ      r4,|L9.80|
;;;989      {
;;;990        bitstatus = SET;
00004c  2001              MOVS     r0,#1
00004e  e000              B        |L9.82|
                  |L9.80|
;;;991      }
;;;992      else
;;;993      {
;;;994        bitstatus = RESET;
000050  2000              MOVS     r0,#0
                  |L9.82|
;;;995      }
;;;996      
;;;997      return bitstatus;  
;;;998    }
000052  bd70              POP      {r4-r6,pc}
;;;999    
                          ENDP


                          AREA ||i.USART_HalfDuplexCmd||, CODE, READONLY, ALIGN=1

                  USART_HalfDuplexCmd PROC
;;;727      */
;;;728    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L10.12|
;;;729    {
;;;730      /* Check the parameters */
;;;731      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;732      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;733      
;;;734      if (NewState != DISABLE)
;;;735      {
;;;736        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;737        USARTx->CR3 |= CR3_HDSEL_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420208          ORR      r2,r2,#8
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L10.22|
                  |L10.12|
;;;738      }
;;;739      else
;;;740      {
;;;741        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;742        USARTx->CR3 &= CR3_HDSEL_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73f7          MOV      r3,#0xfff7
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L10.22|
;;;743      }
;;;744    }
000016  4770              BX       lr
;;;745    
                          ENDP


                          AREA ||i.USART_ITConfig||, CODE, READONLY, ALIGN=1

                  USART_ITConfig PROC
;;;384      */
;;;385    void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;386    {
000002  4603              MOV      r3,r0
;;;387      uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
000004  2400              MOVS     r4,#0
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
;;;388      uint32_t usartxbase = 0x00;
00000a  2000              MOVS     r0,#0
;;;389      /* Check the parameters */
;;;390      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;391      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;392      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;393      /* The CTS interrupt is not available for UART4 and UART5 */
;;;394      if (USART_IT == USART_IT_CTS)
00000c  f640176a          MOV      r7,#0x96a
000010  42b9              CMP      r1,r7
000012  d100              BNE      |L11.22|
;;;395      {
;;;396        assert_param(IS_USART_123_PERIPH(USARTx));
000014  bf00              NOP      
                  |L11.22|
;;;397      }   
;;;398      
;;;399      usartxbase = (uint32_t)USARTx;
000016  4618              MOV      r0,r3
;;;400    
;;;401      /* Get the USART register index */
;;;402      usartreg = (((uint8_t)USART_IT) >> 0x05);
000018  f3c11442          UBFX     r4,r1,#5,#3
;;;403    
;;;404      /* Get the interrupt position */
;;;405      itpos = USART_IT & IT_Mask;
00001c  f001061f          AND      r6,r1,#0x1f
;;;406      itmask = (((uint32_t)0x01) << itpos);
000020  2701              MOVS     r7,#1
000022  fa07f506          LSL      r5,r7,r6
;;;407        
;;;408      if (usartreg == 0x01) /* The IT is in CR1 register */
000026  2c01              CMP      r4,#1
000028  d101              BNE      |L11.46|
;;;409      {
;;;410        usartxbase += 0x0C;
00002a  300c              ADDS     r0,r0,#0xc
00002c  e004              B        |L11.56|
                  |L11.46|
;;;411      }
;;;412      else if (usartreg == 0x02) /* The IT is in CR2 register */
00002e  2c02              CMP      r4,#2
000030  d101              BNE      |L11.54|
;;;413      {
;;;414        usartxbase += 0x10;
000032  3010              ADDS     r0,r0,#0x10
000034  e000              B        |L11.56|
                  |L11.54|
;;;415      }
;;;416      else /* The IT is in CR3 register */
;;;417      {
;;;418        usartxbase += 0x14; 
000036  3014              ADDS     r0,r0,#0x14
                  |L11.56|
;;;419      }
;;;420      if (NewState != DISABLE)
000038  b11a              CBZ      r2,|L11.66|
;;;421      {
;;;422        *(__IO uint32_t*)usartxbase  |= itmask;
00003a  6807              LDR      r7,[r0,#0]
00003c  432f              ORRS     r7,r7,r5
00003e  6007              STR      r7,[r0,#0]
000040  e002              B        |L11.72|
                  |L11.66|
;;;423      }
;;;424      else
;;;425      {
;;;426        *(__IO uint32_t*)usartxbase &= ~itmask;
000042  6807              LDR      r7,[r0,#0]
000044  43af              BICS     r7,r7,r5
000046  6007              STR      r7,[r0,#0]
                  |L11.72|
;;;427      }
;;;428    }
000048  bdf0              POP      {r4-r7,pc}
;;;429    
                          ENDP


                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;172      */
;;;173    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;174    {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
;;;175      uint32_t tmpreg = 0x00, apbclock = 0x00;
00000a  2400              MOVS     r4,#0
00000c  46a2              MOV      r10,r4
;;;176      uint32_t integerdivider = 0x00;
00000e  bf00              NOP      
;;;177      uint32_t fractionaldivider = 0x00;
000010  46a1              MOV      r9,r4
;;;178      uint32_t usartxbase = 0;
000012  2700              MOVS     r7,#0
;;;179      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;180      /* Check the parameters */
;;;181      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;182      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;183      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;184      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;185      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;186      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;187      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;188      /* The hardware flow control is available only for USART1, USART2 and USART3 */
;;;189      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
000014  89b0              LDRH     r0,[r6,#0xc]
000016  b100              CBZ      r0,|L12.26|
;;;190      {
;;;191        assert_param(IS_USART_123_PERIPH(USARTx));
000018  bf00              NOP      
                  |L12.26|
;;;192      }
;;;193    
;;;194      usartxbase = (uint32_t)USARTx;
00001a  462f              MOV      r7,r5
;;;195    
;;;196    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;197      tmpreg = USARTx->CR2;
00001c  8a2c              LDRH     r4,[r5,#0x10]
;;;198      /* Clear STOP[13:12] bits */
;;;199      tmpreg &= CR2_STOP_CLEAR_Mask;
00001e  f64c70ff          MOV      r0,#0xcfff
000022  4004              ANDS     r4,r4,r0
;;;200      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;201      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;202      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
000024  88f0              LDRH     r0,[r6,#6]
000026  4304              ORRS     r4,r4,r0
;;;203      
;;;204      /* Write to USART CR2 */
;;;205      USARTx->CR2 = (uint16_t)tmpreg;
000028  822c              STRH     r4,[r5,#0x10]
;;;206    
;;;207    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;208      tmpreg = USARTx->CR1;
00002a  89ac              LDRH     r4,[r5,#0xc]
;;;209      /* Clear M, PCE, PS, TE and RE bits */
;;;210      tmpreg &= CR1_CLEAR_Mask;
00002c  f64e10f3          MOV      r0,#0xe9f3
000030  4004              ANDS     r4,r4,r0
;;;211      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;212      /* Set the M bits according to USART_WordLength value */
;;;213      /* Set PCE and PS bits according to USART_Parity value */
;;;214      /* Set TE and RE bits according to USART_Mode value */
;;;215      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
000032  88b0              LDRH     r0,[r6,#4]
000034  8931              LDRH     r1,[r6,#8]
000036  4308              ORRS     r0,r0,r1
000038  8971              LDRH     r1,[r6,#0xa]
00003a  4308              ORRS     r0,r0,r1
00003c  4304              ORRS     r4,r4,r0
;;;216                USART_InitStruct->USART_Mode;
;;;217      /* Write to USART CR1 */
;;;218      USARTx->CR1 = (uint16_t)tmpreg;
00003e  81ac              STRH     r4,[r5,#0xc]
;;;219    
;;;220    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;221      tmpreg = USARTx->CR3;
000040  8aac              LDRH     r4,[r5,#0x14]
;;;222      /* Clear CTSE and RTSE bits */
;;;223      tmpreg &= CR3_CLEAR_Mask;
000042  f64f40ff          MOV      r0,#0xfcff
000046  4004              ANDS     r4,r4,r0
;;;224      /* Configure the USART HFC -------------------------------------------------*/
;;;225      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;226      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
000048  89b0              LDRH     r0,[r6,#0xc]
00004a  4304              ORRS     r4,r4,r0
;;;227      /* Write to USART CR3 */
;;;228      USARTx->CR3 = (uint16_t)tmpreg;
00004c  82ac              STRH     r4,[r5,#0x14]
;;;229    
;;;230    /*---------------------------- USART BRR Configuration -----------------------*/
;;;231      /* Configure the USART Baud Rate -------------------------------------------*/
;;;232      RCC_GetClocksFreq(&RCC_ClocksStatus);
00004e  a801              ADD      r0,sp,#4
000050  f7fffffe          BL       RCC_GetClocksFreq
;;;233      if (usartxbase == USART1_BASE)
000054  481f              LDR      r0,|L12.212|
000056  4287              CMP      r7,r0
000058  d102              BNE      |L12.96|
;;;234      {
;;;235        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
00005a  f8dda010          LDR      r10,[sp,#0x10]
00005e  e001              B        |L12.100|
                  |L12.96|
;;;236      }
;;;237      else
;;;238      {
;;;239        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
000060  f8dda00c          LDR      r10,[sp,#0xc]
                  |L12.100|
;;;240      }
;;;241      
;;;242      /* Determine the integer part */
;;;243      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
000064  89a8              LDRH     r0,[r5,#0xc]
000066  f4004000          AND      r0,r0,#0x8000
00006a  b140              CBZ      r0,|L12.126|
;;;244      {
;;;245        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;246        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
00006c  eb0a00ca          ADD      r0,r10,r10,LSL #3
000070  eb00100a          ADD      r0,r0,r10,LSL #4
000074  6831              LDR      r1,[r6,#0]
000076  0049              LSLS     r1,r1,#1
000078  fbb0f8f1          UDIV     r8,r0,r1
00007c  e007              B        |L12.142|
                  |L12.126|
;;;247      }
;;;248      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;249      {
;;;250        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;251        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
00007e  eb0a00ca          ADD      r0,r10,r10,LSL #3
000082  eb00100a          ADD      r0,r0,r10,LSL #4
000086  6831              LDR      r1,[r6,#0]
000088  0089              LSLS     r1,r1,#2
00008a  fbb0f8f1          UDIV     r8,r0,r1
                  |L12.142|
;;;252      }
;;;253      tmpreg = (integerdivider / 100) << 4;
00008e  2064              MOVS     r0,#0x64
000090  fbb8f0f0          UDIV     r0,r8,r0
000094  0104              LSLS     r4,r0,#4
;;;254    
;;;255      /* Determine the fractional part */
;;;256      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
000096  0920              LSRS     r0,r4,#4
000098  2164              MOVS     r1,#0x64
00009a  fb018910          MLS      r9,r1,r0,r8
;;;257    
;;;258      /* Implement the fractional part in the register */
;;;259      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
00009e  89a8              LDRH     r0,[r5,#0xc]
0000a0  f4004000          AND      r0,r0,#0x8000
0000a4  b140              CBZ      r0,|L12.184|
;;;260      {
;;;261        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
0000a6  2032              MOVS     r0,#0x32
0000a8  eb0000c9          ADD      r0,r0,r9,LSL #3
0000ac  fbb0f0f1          UDIV     r0,r0,r1
0000b0  f0000007          AND      r0,r0,#7
0000b4  4304              ORRS     r4,r4,r0
0000b6  e008              B        |L12.202|
                  |L12.184|
;;;262      }
;;;263      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;264      {
;;;265        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
0000b8  2032              MOVS     r0,#0x32
0000ba  eb001009          ADD      r0,r0,r9,LSL #4
0000be  2164              MOVS     r1,#0x64
0000c0  fbb0f0f1          UDIV     r0,r0,r1
0000c4  f000000f          AND      r0,r0,#0xf
0000c8  4304              ORRS     r4,r4,r0
                  |L12.202|
;;;266      }
;;;267      
;;;268      /* Write to USART BRR */
;;;269      USARTx->BRR = (uint16_t)tmpreg;
0000ca  812c              STRH     r4,[r5,#8]
;;;270    }
0000cc  b006              ADD      sp,sp,#0x18
0000ce  e8bd87f0          POP      {r4-r10,pc}
;;;271    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L12.212|
                          DCD      0x40013800

                          AREA ||i.USART_IrDACmd||, CODE, READONLY, ALIGN=1

                  USART_IrDACmd PROC
;;;833      */
;;;834    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L13.12|
;;;835    {
;;;836      /* Check the parameters */
;;;837      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;838      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;839        
;;;840      if (NewState != DISABLE)
;;;841      {
;;;842        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;843        USARTx->CR3 |= CR3_IREN_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420202          ORR      r2,r2,#2
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L13.22|
                  |L13.12|
;;;844      }
;;;845      else
;;;846      {
;;;847        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;848        USARTx->CR3 &= CR3_IREN_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73fd          MOV      r3,#0xfffd
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L13.22|
;;;849      }
;;;850    }
000016  4770              BX       lr
;;;851    
                          ENDP


                          AREA ||i.USART_IrDAConfig||, CODE, READONLY, ALIGN=1

                  USART_IrDAConfig PROC
;;;814      */
;;;815    void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;816    {
;;;817      /* Check the parameters */
;;;818      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;819      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;820        
;;;821      USARTx->CR3 &= CR3_IRLP_Mask;
000002  f64f73fb          MOV      r3,#0xfffb
000006  401a              ANDS     r2,r2,r3
000008  8282              STRH     r2,[r0,#0x14]
;;;822      USARTx->CR3 |= USART_IrDAMode;
00000a  8a82              LDRH     r2,[r0,#0x14]
00000c  430a              ORRS     r2,r2,r1
00000e  8282              STRH     r2,[r0,#0x14]
;;;823    }
000010  4770              BX       lr
;;;824    
                          ENDP


                          AREA ||i.USART_LINBreakDetectLengthConfig||, CODE, READONLY, ALIGN=1

                  USART_LINBreakDetectLengthConfig PROC
;;;543      */
;;;544    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;545    {
;;;546      /* Check the parameters */
;;;547      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;548      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;549      
;;;550      USARTx->CR2 &= CR2_LBDL_Mask;
000002  f64f73df          MOV      r3,#0xffdf
000006  401a              ANDS     r2,r2,r3
000008  8202              STRH     r2,[r0,#0x10]
;;;551      USARTx->CR2 |= USART_LINBreakDetectLength;  
00000a  8a02              LDRH     r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  8202              STRH     r2,[r0,#0x10]
;;;552    }
000010  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.USART_LINCmd||, CODE, READONLY, ALIGN=1

                  USART_LINCmd PROC
;;;562      */
;;;563    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L16.12|
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;567      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;568      
;;;569      if (NewState != DISABLE)
;;;570      {
;;;571        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;572        USARTx->CR2 |= CR2_LINEN_Set;
000002  8a02              LDRH     r2,[r0,#0x10]
000004  f4424280          ORR      r2,r2,#0x4000
000008  8202              STRH     r2,[r0,#0x10]
00000a  e004              B        |L16.22|
                  |L16.12|
;;;573      }
;;;574      else
;;;575      {
;;;576        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;577        USARTx->CR2 &= CR2_LINEN_Reset;
00000c  8a02              LDRH     r2,[r0,#0x10]
00000e  f64b73ff          MOV      r3,#0xbfff
000012  401a              ANDS     r2,r2,r3
000014  8202              STRH     r2,[r0,#0x10]
                  |L16.22|
;;;578      }
;;;579    }
000016  4770              BX       lr
;;;580    
                          ENDP


                          AREA ||i.USART_OneBitMethodCmd||, CODE, READONLY, ALIGN=1

                  USART_OneBitMethodCmd PROC
;;;785      */
;;;786    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L17.12|
;;;787    {
;;;788      /* Check the parameters */
;;;789      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;790      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;791      
;;;792      if (NewState != DISABLE)
;;;793      {
;;;794        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;795        USARTx->CR3 |= CR3_ONEBITE_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f4426200          ORR      r2,r2,#0x800
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L17.22|
                  |L17.12|
;;;796      }
;;;797      else
;;;798      {
;;;799        /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
;;;800        USARTx->CR3 &= CR3_ONEBITE_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f24f73ff          MOV      r3,#0xf7ff
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L17.22|
;;;801      }
;;;802    }
000016  4770              BX       lr
;;;803    
                          ENDP


                          AREA ||i.USART_OverSampling8Cmd||, CODE, READONLY, ALIGN=1

                  USART_OverSampling8Cmd PROC
;;;758      */
;;;759    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L18.12|
;;;760    {
;;;761      /* Check the parameters */
;;;762      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;763      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;764      
;;;765      if (NewState != DISABLE)
;;;766      {
;;;767        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;768        USARTx->CR1 |= CR1_OVER8_Set;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f4424200          ORR      r2,r2,#0x8000
000008  8182              STRH     r2,[r0,#0xc]
00000a  e003              B        |L18.20|
                  |L18.12|
;;;769      }
;;;770      else
;;;771      {
;;;772        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;773        USARTx->CR1 &= CR1_OVER8_Reset;
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f3c2020e          UBFX     r2,r2,#0,#15
000012  8182              STRH     r2,[r0,#0xc]
                  |L18.20|
;;;774      }
;;;775    }
000014  4770              BX       lr
;;;776    
                          ENDP


                          AREA ||i.USART_ReceiveData||, CODE, READONLY, ALIGN=1

                  USART_ReceiveData PROC
;;;605      */
;;;606    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000000  4601              MOV      r1,r0
;;;607    {
;;;608      /* Check the parameters */
;;;609      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;610      
;;;611      /* Receive Data */
;;;612      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000002  8888              LDRH     r0,[r1,#4]
000004  f3c00008          UBFX     r0,r0,#0,#9
;;;613    }
000008  4770              BX       lr
;;;614    
                          ENDP


                          AREA ||i.USART_ReceiverWakeUpCmd||, CODE, READONLY, ALIGN=1

                  USART_ReceiverWakeUpCmd PROC
;;;514      */
;;;515    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L20.12|
;;;516    {
;;;517      /* Check the parameters */
;;;518      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;519      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;520      
;;;521      if (NewState != DISABLE)
;;;522      {
;;;523        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;524        USARTx->CR1 |= CR1_RWU_Set;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f0420202          ORR      r2,r2,#2
000008  8182              STRH     r2,[r0,#0xc]
00000a  e004              B        |L20.22|
                  |L20.12|
;;;525      }
;;;526      else
;;;527      {
;;;528        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;529        USARTx->CR1 &= CR1_RWU_Reset;
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f64f73fd          MOV      r3,#0xfffd
000012  401a              ANDS     r2,r2,r3
000014  8182              STRH     r2,[r0,#0xc]
                  |L20.22|
;;;530      }
;;;531    }
000016  4770              BX       lr
;;;532    
                          ENDP


                          AREA ||i.USART_SendBreak||, CODE, READONLY, ALIGN=1

                  USART_SendBreak PROC
;;;621      */
;;;622    void USART_SendBreak(USART_TypeDef* USARTx)
000000  8981              LDRH     r1,[r0,#0xc]
;;;623    {
;;;624      /* Check the parameters */
;;;625      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;626      
;;;627      /* Send break characters */
;;;628      USARTx->CR1 |= CR1_SBK_Set;
000002  f0410101          ORR      r1,r1,#1
000006  8181              STRH     r1,[r0,#0xc]
;;;629    }
000008  4770              BX       lr
;;;630    
                          ENDP


                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=1

                  USART_SendData PROC
;;;588      */
;;;589    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
000000  f3c10208          UBFX     r2,r1,#0,#9
;;;590    {
;;;591      /* Check the parameters */
;;;592      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;593      assert_param(IS_USART_DATA(Data)); 
;;;594        
;;;595      /* Transmit Data */
;;;596      USARTx->DR = (Data & (uint16_t)0x01FF);
000004  8082              STRH     r2,[r0,#4]
;;;597    }
000006  4770              BX       lr
;;;598    
                          ENDP


                          AREA ||i.USART_SetAddress||, CODE, READONLY, ALIGN=1

                  USART_SetAddress PROC
;;;472      */
;;;473    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;474    {
;;;475      /* Check the parameters */
;;;476      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;477      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;478        
;;;479      /* Clear the USART address */
;;;480      USARTx->CR2 &= CR2_Address_Mask;
000002  f64f73f0          MOV      r3,#0xfff0
000006  401a              ANDS     r2,r2,r3
000008  8202              STRH     r2,[r0,#0x10]
;;;481      /* Set the USART address node */
;;;482      USARTx->CR2 |= USART_Address;
00000a  8a02              LDRH     r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  8202              STRH     r2,[r0,#0x10]
;;;483    }
000010  4770              BX       lr
;;;484    
                          ENDP


                          AREA ||i.USART_SetGuardTime||, CODE, READONLY, ALIGN=1

                  USART_SetGuardTime PROC
;;;637      */
;;;638    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;639    {    
;;;640      /* Check the parameters */
;;;641      assert_param(IS_USART_123_PERIPH(USARTx));
;;;642      
;;;643      /* Clear the USART Guard time */
;;;644      USARTx->GTPR &= GTPR_LSB_Mask;
000002  b2d2              UXTB     r2,r2
000004  8302              STRH     r2,[r0,#0x18]
;;;645      /* Set the USART guard time */
;;;646      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
000006  8b02              LDRH     r2,[r0,#0x18]
000008  ea422201          ORR      r2,r2,r1,LSL #8
00000c  8302              STRH     r2,[r0,#0x18]
;;;647    }
00000e  4770              BX       lr
;;;648    
                          ENDP


                          AREA ||i.USART_SetPrescaler||, CODE, READONLY, ALIGN=1

                  USART_SetPrescaler PROC
;;;657      */
;;;658    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;659    { 
;;;660      /* Check the parameters */
;;;661      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;662      
;;;663      /* Clear the USART prescaler */
;;;664      USARTx->GTPR &= GTPR_MSB_Mask;
000002  f402427f          AND      r2,r2,#0xff00
000006  8302              STRH     r2,[r0,#0x18]
;;;665      /* Set the USART prescaler */
;;;666      USARTx->GTPR |= USART_Prescaler;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;667    }
00000e  4770              BX       lr
;;;668    
                          ENDP


                          AREA ||i.USART_SmartCardCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardCmd PROC
;;;676      */
;;;677    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L26.12|
;;;678    {
;;;679      /* Check the parameters */
;;;680      assert_param(IS_USART_123_PERIPH(USARTx));
;;;681      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;682      if (NewState != DISABLE)
;;;683      {
;;;684        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;685        USARTx->CR3 |= CR3_SCEN_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420220          ORR      r2,r2,#0x20
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L26.22|
                  |L26.12|
;;;686      }
;;;687      else
;;;688      {
;;;689        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;690        USARTx->CR3 &= CR3_SCEN_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73df          MOV      r3,#0xffdf
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L26.22|
;;;691      }
;;;692    }
000016  4770              BX       lr
;;;693    
                          ENDP


                          AREA ||i.USART_SmartCardNACKCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardNACKCmd PROC
;;;701      */
;;;702    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L27.12|
;;;703    {
;;;704      /* Check the parameters */
;;;705      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;706      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;707      if (NewState != DISABLE)
;;;708      {
;;;709        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;710        USARTx->CR3 |= CR3_NACK_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420210          ORR      r2,r2,#0x10
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L27.22|
                  |L27.12|
;;;711      }
;;;712      else
;;;713      {
;;;714        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;715        USARTx->CR3 &= CR3_NACK_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73ef          MOV      r3,#0xffef
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L27.22|
;;;716      }
;;;717    }
000016  4770              BX       lr
;;;718    
                          ENDP


                          AREA ||i.USART_StructInit||, CODE, READONLY, ALIGN=1

                  USART_StructInit PROC
;;;277      */
;;;278    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;279    {
;;;280      /* USART_InitStruct members default value */
;;;281      USART_InitStruct->USART_BaudRate = 9600;
000004  6001              STR      r1,[r0,#0]
;;;282      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;283      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00000a  80c1              STRH     r1,[r0,#6]
;;;284      USART_InitStruct->USART_Parity = USART_Parity_No ;
00000c  8101              STRH     r1,[r0,#8]
;;;285      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00000e  210c              MOVS     r1,#0xc
000010  8141              STRH     r1,[r0,#0xa]
;;;286      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000012  2100              MOVS     r1,#0
000014  8181              STRH     r1,[r0,#0xc]
;;;287    }
000016  4770              BX       lr
;;;288    
                          ENDP


                          AREA ||i.USART_WakeUpConfig||, CODE, READONLY, ALIGN=1

                  USART_WakeUpConfig PROC
;;;495      */
;;;496    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
000000  8982              LDRH     r2,[r0,#0xc]
;;;497    {
;;;498      /* Check the parameters */
;;;499      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;500      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;501      
;;;502      USARTx->CR1 &= CR1_WAKE_Mask;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8182              STRH     r2,[r0,#0xc]
;;;503      USARTx->CR1 |= USART_WakeUp;
00000a  8982              LDRH     r2,[r0,#0xc]
00000c  430a              ORRS     r2,r2,r1
00000e  8182              STRH     r2,[r0,#0xc]
;;;504    }
000010  4770              BX       lr
;;;505    
                          ENDP

