; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_rtc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\USER -I..\MDK-ARM -IC:\Users\Administrator\Desktop\stm32-uart-chenlong\stm32-uart-chenlong\MDK-ARM\RTE -I"D:\Program Files\keil5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include" -I"D:\Program Files\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0" -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F10X_MD --omf_browse=.\obj\stm32f10x_rtc.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;271      */
;;;272    void RTC_ClearFlag(uint16_t RTC_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;273    {
;;;274      /* Check the parameters */
;;;275      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;276        
;;;277      /* Clear the coressponding RTC flag */
;;;278      RTC->CRL &= (uint16_t)~RTC_FLAG;
000002  8809              LDRH     r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  8011              STRH     r1,[r2,#0]
;;;279    }
00000a  4770              BX       lr
;;;280    
                          ENDP

                  |L1.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;316      */
;;;317    void RTC_ClearITPendingBit(uint16_t RTC_IT)
000000  4902              LDR      r1,|L2.12|
;;;318    {
;;;319      /* Check the parameters */
;;;320      assert_param(IS_RTC_IT(RTC_IT));  
;;;321      
;;;322      /* Clear the coressponding RTC pending bit */
;;;323      RTC->CRL &= (uint16_t)~RTC_IT;
000002  8809              LDRH     r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  8011              STRH     r1,[r2,#0]
;;;324    }
00000a  4770              BX       lr
;;;325    
                          ENDP

                  |L2.12|
                          DCD      0x40002804

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;109      */
;;;110    void RTC_EnterConfigMode(void)
000000  4803              LDR      r0,|L3.16|
;;;111    {
;;;112      /* Set the CNF flag to enter in the Configuration Mode */
;;;113      RTC->CRL |= RTC_CRL_CNF;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L3.16|
00000a  8008              STRH     r0,[r1,#0]
;;;114    }
00000c  4770              BX       lr
;;;115    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40002804

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;120      */
;;;121    void RTC_ExitConfigMode(void)
000000  4803              LDR      r0,|L4.16|
;;;122    {
;;;123      /* Reset the CNF flag to exit from the Configuration Mode */
;;;124      RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71ef          MOV      r1,#0xffef
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L4.16|
00000c  8008              STRH     r0,[r1,#0]
;;;125    }
00000e  4770              BX       lr
;;;126    
                          ENDP

                  |L4.16|
                          DCD      0x40002804

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;131      */
;;;132    uint32_t RTC_GetCounter(void)
000000  2100              MOVS     r1,#0
;;;133    {
;;;134      uint16_t tmp = 0;
;;;135      tmp = RTC->CNTL;
000002  4803              LDR      r0,|L5.16|
000004  8801              LDRH     r1,[r0,#0]
;;;136      return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
000006  1f00              SUBS     r0,r0,#4
000008  8800              LDRH     r0,[r0,#0]
00000a  ea414000          ORR      r0,r1,r0,LSL #16
;;;137    }
00000e  4770              BX       lr
;;;138    
                          ENDP

                  |L5.16|
                          DCD      0x4000281c

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;191      */
;;;192    uint32_t RTC_GetDivider(void)
000000  2000              MOVS     r0,#0
;;;193    {
;;;194      uint32_t tmp = 0x00;
;;;195      tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
000002  4904              LDR      r1,|L6.20|
000004  8809              LDRH     r1,[r1,#0]
000006  0709              LSLS     r1,r1,#28
000008  0b08              LSRS     r0,r1,#12
;;;196      tmp |= RTC->DIVL;
00000a  4902              LDR      r1,|L6.20|
00000c  1d09              ADDS     r1,r1,#4
00000e  8809              LDRH     r1,[r1,#0]
000010  4308              ORRS     r0,r0,r1
;;;197      return tmp;
;;;198    }
000012  4770              BX       lr
;;;199    
                          ENDP

                  |L6.20|
                          DCD      0x40002810

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;242      */
;;;243    FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
000000  4601              MOV      r1,r0
;;;244    {
;;;245      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;246      
;;;247      /* Check the parameters */
;;;248      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;249      
;;;250      if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
000004  4a03              LDR      r2,|L7.20|
000006  8812              LDRH     r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L7.16|
;;;251      {
;;;252        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L7.18|
                  |L7.16|
;;;253      }
;;;254      else
;;;255      {
;;;256        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L7.18|
;;;257      }
;;;258      return bitstatus;
;;;259    }
000012  4770              BX       lr
;;;260    
                          ENDP

                  |L7.20|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;289      */
;;;290    ITStatus RTC_GetITStatus(uint16_t RTC_IT)
000000  4601              MOV      r1,r0
;;;291    {
;;;292      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;293      /* Check the parameters */
;;;294      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;295      
;;;296      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000004  4a06              LDR      r2,|L8.32|
000006  8812              LDRH     r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b2d0              UXTB     r0,r2
;;;297      if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
00000c  4a04              LDR      r2,|L8.32|
00000e  1f12              SUBS     r2,r2,#4
000010  8812              LDRH     r2,[r2,#0]
000012  400a              ANDS     r2,r2,r1
000014  b112              CBZ      r2,|L8.28|
000016  b108              CBZ      r0,|L8.28|
;;;298      {
;;;299        bitstatus = SET;
000018  2001              MOVS     r0,#1
00001a  e000              B        |L8.30|
                  |L8.28|
;;;300      }
;;;301      else
;;;302      {
;;;303        bitstatus = RESET;
00001c  2000              MOVS     r0,#0
                  |L8.30|
;;;304      }
;;;305      return bitstatus;
;;;306    }
00001e  4770              BX       lr
;;;307    
                          ENDP

                  |L8.32|
                          DCD      0x40002804

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;88       */
;;;89     void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L9.14|
;;;90     {
;;;91       /* Check the parameters */
;;;92       assert_param(IS_RTC_IT(RTC_IT));  
;;;93       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;94       
;;;95       if (NewState != DISABLE)
;;;96       {
;;;97         RTC->CRH |= RTC_IT;
000002  4a06              LDR      r2,|L9.28|
000004  8812              LDRH     r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L9.28|
00000a  801a              STRH     r2,[r3,#0]
00000c  e004              B        |L9.24|
                  |L9.14|
;;;98       }
;;;99       else
;;;100      {
;;;101        RTC->CRH &= (uint16_t)~RTC_IT;
00000e  4a03              LDR      r2,|L9.28|
000010  8812              LDRH     r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L9.28|
000016  801a              STRH     r2,[r3,#0]
                  |L9.24|
;;;102      }
;;;103    }
000018  4770              BX       lr
;;;104    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40002800

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;176      */
;;;177    void RTC_SetAlarm(uint32_t AlarmValue)
000000  b500              PUSH     {lr}
;;;178    {  
000002  4602              MOV      r2,r0
;;;179      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;180      /* Set the ALARM MSB word */
;;;181      RTC->ALRH = AlarmValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L10.24|
00000c  8008              STRH     r0,[r1,#0]
;;;182      /* Set the ALARM LSB word */
;;;183      RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;184      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;185    }
000016  bd00              POP      {pc}
;;;186    
                          ENDP

                  |L10.24|
                          DCD      0x40002820

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;143      */
;;;144    void RTC_SetCounter(uint32_t CounterValue)
000000  b500              PUSH     {lr}
;;;145    { 
000002  4602              MOV      r2,r0
;;;146      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;147      /* Set RTC COUNTER MSB word */
;;;148      RTC->CNTH = CounterValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L11.24|
00000c  8008              STRH     r0,[r1,#0]
;;;149      /* Set RTC COUNTER LSB word */
;;;150      RTC->CNTL = (CounterValue & RTC_LSB_MASK);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;151      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;152    }
000016  bd00              POP      {pc}
;;;153    
                          ENDP

                  |L11.24|
                          DCD      0x40002818

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;158      */
;;;159    void RTC_SetPrescaler(uint32_t PrescalerValue)
000000  b500              PUSH     {lr}
;;;160    {
000002  4602              MOV      r2,r0
;;;161      /* Check the parameters */
;;;162      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;163      
;;;164      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;165      /* Set RTC PRESCALER MSB word */
;;;166      RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
000008  f3c24003          UBFX     r0,r2,#16,#4
00000c  4903              LDR      r1,|L12.28|
00000e  8008              STRH     r0,[r1,#0]
;;;167      /* Set RTC PRESCALER LSB word */
;;;168      RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
000010  1d09              ADDS     r1,r1,#4
000012  800a              STRH     r2,[r1,#0]
;;;169      RTC_ExitConfigMode();
000014  f7fffffe          BL       RTC_ExitConfigMode
;;;170    }
000018  bd00              POP      {pc}
;;;171    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40002808

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;205      */
;;;206    void RTC_WaitForLastTask(void)
000000  bf00              NOP      
                  |L13.2|
;;;207    {
;;;208      /* Loop until RTOFF flag is set */
;;;209      while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
000002  4803              LDR      r0,|L13.16|
000004  8800              LDRH     r0,[r0,#0]
000006  f0000020          AND      r0,r0,#0x20
00000a  2800              CMP      r0,#0
00000c  d0f9              BEQ      |L13.2|
;;;210      {
;;;211      }
;;;212    }
00000e  4770              BX       lr
;;;213    
                          ENDP

                  |L13.16|
                          DCD      0x40002804

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;221      */
;;;222    void RTC_WaitForSynchro(void)
000000  4807              LDR      r0,|L14.32|
;;;223    {
;;;224      /* Clear RSF flag */
;;;225      RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71f7          MOV      r1,#0xfff7
000008  4008              ANDS     r0,r0,r1
00000a  4905              LDR      r1,|L14.32|
00000c  8008              STRH     r0,[r1,#0]
;;;226      /* Loop until RSF flag is set */
;;;227      while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
00000e  bf00              NOP      
                  |L14.16|
000010  4803              LDR      r0,|L14.32|
000012  8800              LDRH     r0,[r0,#0]
000014  f0000008          AND      r0,r0,#8
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L14.16|
;;;228      {
;;;229      }
;;;230    }
00001c  4770              BX       lr
;;;231    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x40002804
